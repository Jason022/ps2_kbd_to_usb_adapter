
 This file is part of ps2_kbd_to_usb_adapter,
 copyright (c) 2014 Nicolas S. Dade

 ps2_kbd_to_usb_adapter, is free software: you can redistribute it 
 and/or modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation, either version 3 of the
 License, or (at your option) any later version.

 ps2_kbd_to_usb_adapter, is distributed in the hope that it will be
 useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with ps2_kbd_to_usb_adapter.  If not, see http://www.gnu.org/licenses/

-----------------------------------------------------------------------------

This code uses an ATmega32u4 as a PS/2 keyboard to USB keyboard converter, to
allow using a good ole IBM Model M (or Northgate Omnikey Ultra) AT or PS/2
keyboard with modern computers which now (2014) lack any PS/2 ports at all.

I wrote it after trying two commercial adapters and finding neither worked very
well. Keys would remain stuck down (or rather, the UP keystroke from PS/2 didn't
register).  In this code PS/2 receive is done in hardware using the ATmega's
UART set in a mode which matches what PS/2 uses (externally clocked, odd-parity,
1 stop-bit). In addition the code asks the keyboard for resends (0xFE command)
when a parity error occurs. The combination of these two features is what makes
this code more reliable than the commercial adapters and other low level PS/2
libraries I've found.

In addition, after having worked on PS/2 and USB keyboard firmware in 1997-1999
I liked the low latency of PS/2 (~1 msec for DOWN, ~2 msec for UP) as opposed to
that of typical USB keyboards. 10 msec was the suggested polling interval in the
USB 1.1 HID spec and almost all USB keyboards use that. The exceptions are
"gaming" keyboards in which something better than the default is used. So here
I've set the polling to 2 msec, which matches PS/2.

I like using the Adafruit ATmega32u4 breakout board
(https://www.adafruit.com/products/296) because its bootloader (accessed by
pressing the reset button) allows for quick and easy reflashing without
connecting up the 6-pin header. But any board with an ATMega32u4 will do, for
example the Teensy 2.0 or even an Arduino Leonardo should do (you're on your
own, though).  The make target 'flash' (as in "make flash") and the configured
target in the makefile are setup for the Adafruit ATmega32u4 breakout board.
Edit as you wish.

This code uses the LUFA USB library. Fetch it and set the path to the LUFA
source in the LUFA_PATH variable in Makefile.

In order to use this code you should configure a few things. Specifically in the
USB descriptor you should set your own strings for the manufacturer, device and
serial number of your keyboard.  I like to set these to the exact keyboard I am
building the adaptor into, just for fun. The constants are named
usb_manufacturer_str, usb_product_str and usb_serial_str.

The keyboard and descriptor are set to be an US English keyboard without any
extra keys. That is because I don't have anything else to test with. If you want
to use this with a different language you should edit the CountryCode field in
the descriptor (google for the USB 1.1 HID spec for the value you need, or use 0
like most keyboards do), AND you must edit the mapping from PS/2 keycodes to USB
keycodes in keycodes.c. The latter step will be tedious. Tough. It was for me as
well :-)

If you have measured it you can set the correct power requirement in the
descriptor in the MaxPowerConsumption field.

Do note that PS/2 ports supplied ample power (5V/275mA) and the older the
keyboard the more of that it used. So if you are plugging the adapter into an
unpowered USB hub you might get an error (see dmesg on linux) that the device
requires too much power to operate. In that case you can use a combination of
two things: use a USB port directly connected to the PC or on a powered hub (the
right thing to do), and hack the value of MaxPowerConsumption to something the
PC will accept. However if you do the latter and don't supply the needed power
the keyboard can become erratic.

-- 
  Nicolas S. Dade
  <you can find my email by googling my name>

